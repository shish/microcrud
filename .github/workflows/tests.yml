name: Unit Tests

on: [push, pull_request]

jobs:
  build:
    name: PHP ${{ matrix.php }} / DB ${{ matrix.database }}
    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        php: ['7.2', '7.3']
        database: ['pgsql', 'mysql', 'sqlite']

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Set up PHP
      uses: shivammathur/setup-php@master
      with:
        php-version: ${{ matrix.php }}
        coverage: pcov
        extension-csv: mbstring

    - name: Set up database
      run: |
        sudo apt update
        if [[ "${{ matrix.database }}" == "pgsql" ]]; then
            sudo apt-get install -y postgresql postgresql-client ;
            psql --version ;
            sudo -u postgres psql -c "SELECT set_config('log_statement', 'all', false);" -U postgres ;
            sudo -u postgres psql -c "CREATE USER root WITH PASSWORD 'root';" -U postgres ;
            sudo -u postgres psql -c "CREATE DATABASE test WITH OWNER root;" -U postgres ;
        fi
        if [[ "${{ matrix.database }}" == "mysql" ]]; then
            mysql --version ;
            mysql -e "SET GLOBAL general_log = 'ON';" -uroot -proot ;
            mysql -e "CREATE DATABASE test;" -uroot -proot ;
        fi
        if [[ "${{ matrix.database }}" == "sqlite" ]]; then
            sudo apt-get install -y sqlite3 ;
            sqlite3 --version ;
        fi

    - name: Check Versions
      run: php -v && composer -V
      
    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run test suite
      run: |
        if [[ "${{ matrix.database }}" == "pgsql" ]]; then
            export DSN=pgsql:user=root;password=root;host=127.0.0.1;dbname=test
        fi
        if [[ "${{ matrix.database }}" == "mysql" ]]; then
            export DSN=mysql:user=root;password=root;host=127.0.0.1;dbname=test
        fi
        if [[ "${{ matrix.database }}" == "sqlite" ]]; then
            export DSN=sqlite::memory:
        fi
        vendor/bin/phpunit tests --coverage-text --whitelist src
